name: Publish Release

on:
  workflow_call:
    inputs:
      channel:
        required: true
        type: string
      package_spec:
        required: true
        type: string
    secrets:
      NPM_TOKEN:
        required: true
      # GITHUB_TOKEN:
      #   required: true


jobs:
  publish-release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package_spec:
          - ${{ fromJson(inputs.package_spec) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch entire repo
          # fetch-tags: true  # Fetch all tags
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/

      - name: Use Source Branch #  | xargs echo
        # && inputs.channel == 'alpha'
        if: github.event_name == 'pull_request'
        run: echo "${{ github.head_ref }}" && git checkout ${{ github.head_ref }}

      - name: Get Revision Index #  | xargs echo
        if: inputs.channel != 'stable'
        id: get_revision_index
        run: echo "new_index=$(git tag -l 'v${{inputs.package_spec.version}}-${{inputs.channel}}.[0-9]*' | wc -l | xargs echo)" >> $GITHUB_OUTPUT
      - name: Print Revision Index #  | xargs echo
        if: inputs.channel != 'stable'
        run: echo "new_index=$(git tag -l 'v${{inputs.package_spec.version}}-${{inputs.channel}}.[0-9]*' | wc -l | xargs echo)" && echo "${{ steps.get_revision_index.outputs.new_index }}"
      - name: Add Version Tag
        id: add_version_tag
        uses: Bullrich/commit-autotag@v1.0.1
        with:
          # Autotag will look for the appropriate file in in this location (relative to project root).
          root: "./" # optional, default is ./
          # Head branch to compare changes. It uses master by default
          head_branch: main # optional, default is master
          # Options include 'package' (for package.json), 'docker' (for Dockerfile), and 'regex' to extract from an arbitrary file. This does not need to be specified if the "regex_pattern" property is provided.
          strategy: package # optional, default is package
          # By default, package.json uses semantic versioning, such as "1.0.0". A prefix can be used to add text before the tag name. For example, if tag_prefx is set to "v", then the tag would be labeled as "v1.0.0".
          tag_prefix: v # optional
          # Text which is applied to the end of the tag.
          tag_suffix: ${{ inputs.channel != 'stable' && format('-{0}.{1}', inputs.channel, steps.get_revision_index.outputs.new_index) }} # optional
          # This is the annotated commit message associated with the tag. By default, a changelog will be generated from the commits between the latest tag and the new tag (HEAD). This will override that with a hard-coded message.
          # tag_message: # optional
          # The commit message template (per commit). Default is `{{number}}) {{message}} ({{author}}) SHA: {{sha}}`
          # commit_message_template: # optional
          # Explicitly set the version here instead of automatically detecting from `package.json`. Useful for non-JavaScript projects where version may be output by a previous action.
          # version: # optional
          # An optional attribute containing the regular expression used to extract the version number.
          # regex_pattern: # optional
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Check current branch
        run: git branch && git tag -l
      - name: Add "latest" Tag
        if: inputs.channel == 'stable'
        uses: weareyipyip/walking-tag-action@v2.0.0
        with: # git tag 'latest' --force
          # Name of the tag to update
          tag-name: latest
          # Message of the tag to update
          tag-message: This tag marks the commit of the latest stable release.
      - name: Check Outputs
        run: echo "${{ toJSON(steps.add_version_tag.outputs) }}"

      - run: npm ci
      - run: npm version ${{ steps.add_version_tag.outputs.tagname }} --no-git-tag-version
      - run: npm publish --tag ${{ inputs.channel }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create Github Release
        id: github_release
        uses: Akryum/release-tag@v4.0.3
        with:
          # The name of the tag. This should come from the webhook payload, `github.GITHUB_REF` when a user pushes a new tag
          tag_name: ${{steps.add_version_tag.outputs.tagname}}
          # The name of the release. For example, `Release v1.0.1`
          release_name: ${{steps.add_version_tag.outputs.tagname}} # optional
          # Conventional changelog preset. Possible values: 'angular', 'atom', 'codemirror', 'ember', 'eslint', 'express', 'jquery', 'jshint'
          preset: ${{ inputs.channel == 'stable' && null || 'angular' }} # optional
          # `true` to create a draft (unpublished) release, `false` to create a published one. Default: `false`
          draft: true # optional
          # `true` to identify the release as a prerelease. `false` to identify the release as a full release. Default: `false`
          prerelease: ${{ inputs.channel != 'stable' }} # optional
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-docs:
    runs-on: ubuntu-latest
    needs: publish-release
    if: inputs.channel == 'stable'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Build
        run: pwd && ls && npm ci && npm run build:docs
      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3.0.1
        with:
          # Artifact name
          name: github-pages # optional, default is github-pages
          # Path of the directory containing the static assets.
          path: docs # default is _site/
          # Duration after which artifact will expire in days.
          retention-days: 30 # optional, default is 1

  deploy-docs:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-docs
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          # GitHub token
          # token: # default is ${{ github.token }}
          # Time in milliseconds after which to timeout and cancel the deployment (default: 10 minutes)
          # timeout: # optional, default is 600000
          # Maximum number of status report errors before cancelling a deployment (default: 10)
          # error_count: # optional, default is 10
          # Time in milliseconds between two deployment status report (default: 5 seconds)
          # reporting_interval: # optional, default is 5000
          # Name of the artifact to deploy
          artifact_name: github-pages # optional, default is github-pages
          # Is this attempting to deploy a pull request as a GitHub Pages preview site? (NOTE: This feature is only in alpha currently and is not available to the public!)
          # preview: # optional, default is false
